commit bae56f64cb3e8d1d95c7f2f3af3996bbab79cffa
Author: yanxx297 <yanxx297@umn.edu>
Date:   Thu Aug 1 18:24:26 2019 +0800

    Add support to interrupt flag (IF)

diff --git a/priv/guest_x86_defs.h b/priv/guest_x86_defs.h
index 65f4a08..7d3c142 100644
--- a/priv/guest_x86_defs.h
+++ b/priv/guest_x86_defs.h
@@ -198,10 +198,12 @@ extern VexEmNote
 #define X86G_CC_SHIFT_ID  21
 #define X86G_CC_SHIFT_AC  18
 #define X86G_CC_SHIFT_D   10
+#define X86G_CC_SHIFT_I  9
 
 #define X86G_CC_MASK_ID   (1 << X86G_CC_SHIFT_ID)
 #define X86G_CC_MASK_AC   (1 << X86G_CC_SHIFT_AC)
 #define X86G_CC_MASK_D    (1 << X86G_CC_SHIFT_D)
+#define X86G_CC_MASK_I    (1 << X86G_CC_SHIFT_I)
 
 /* FPU flag masks */
 #define X86G_FC_SHIFT_C3   14
diff --git a/priv/guest_x86_helpers.c b/priv/guest_x86_helpers.c
index bc5a29e..5081e30 100644
--- a/priv/guest_x86_helpers.c
+++ b/priv/guest_x86_helpers.c
@@ -725,6 +725,8 @@ UInt LibVEX_GuestX86_get_eflags ( /*IN*/const VexGuestX86State* vex_state )
    vassert(dflag == 1 || dflag == 0xFFFFFFFF);
    if (dflag == 0xFFFFFFFF)
       eflags |= X86G_CC_MASK_D;
+   if (vex_state->guest_IFLAG == 1)
+      eflags |= X86G_CC_MASK_I;
    if (vex_state->guest_IDFLAG == 1)
       eflags |= X86G_CC_MASK_ID;
    if (vex_state->guest_ACFLAG == 1)
@@ -746,6 +748,14 @@ LibVEX_GuestX86_put_eflags ( UInt eflags,
    else
       vex_state->guest_DFLAG = 1;
 
+   /* Interrupt flag (IF) */
+   if (eflags & X86G_CC_MASK_I) {
+      vex_state->guest_IFLAG = 1;
+      eflags &= ~X86G_CC_MASK_I;
+   }
+   else
+      vex_state->guest_IFLAG = 0;
+
    /* ID flag */
    if (eflags & X86G_CC_MASK_ID) {
       vex_state->guest_IDFLAG = 1;
@@ -2835,6 +2845,7 @@ void LibVEX_GuestX86_initialise ( /*OUT*/VexGuestX86State* vex_state )
    vex_state->guest_CC_DEP1 = 0;
    vex_state->guest_CC_DEP2 = 0;
    vex_state->guest_CC_NDEP = 0;
+   vex_state->guest_IFLAG  = 0;
    vex_state->guest_DFLAG   = 1; /* forwards */
    vex_state->guest_IDFLAG  = 0;
    vex_state->guest_ACFLAG  = 0;
@@ -2878,7 +2889,7 @@ void LibVEX_GuestX86_initialise ( /*OUT*/VexGuestX86State* vex_state )
    vex_state->guest_SC_CLASS = 0;
    vex_state->guest_IP_AT_SYSCALL = 0;
 
-   vex_state->padding1 = 0;
+   //vex_state->padding1 = 0;
 }
 
 
@@ -2959,28 +2970,29 @@ VexGuestLayout
           .alwaysDefd 
              = { /*  0 */ ALWAYSDEFD(guest_CC_OP),
                  /*  1 */ ALWAYSDEFD(guest_CC_NDEP),
-                 /*  2 */ ALWAYSDEFD(guest_DFLAG),
-                 /*  3 */ ALWAYSDEFD(guest_IDFLAG),
-                 /*  4 */ ALWAYSDEFD(guest_ACFLAG),
-                 /*  5 */ ALWAYSDEFD(guest_EIP),
-                 /*  6 */ ALWAYSDEFD(guest_FTOP),
-                 /*  7 */ ALWAYSDEFD(guest_FPTAG),
-                 /*  8 */ ALWAYSDEFD(guest_FPROUND),
-                 /*  9 */ ALWAYSDEFD(guest_FC3210),
-                 /* 10 */ ALWAYSDEFD(guest_CS),
-                 /* 11 */ ALWAYSDEFD(guest_DS),
-                 /* 12 */ ALWAYSDEFD(guest_ES),
-                 /* 13 */ ALWAYSDEFD(guest_FS),
-                 /* 14 */ ALWAYSDEFD(guest_GS),
-                 /* 15 */ ALWAYSDEFD(guest_SS),
-                 /* 16 */ ALWAYSDEFD(guest_LDT),
-                 /* 17 */ ALWAYSDEFD(guest_GDT),
-                 /* 18 */ ALWAYSDEFD(guest_EMNOTE),
-                 /* 19 */ ALWAYSDEFD(guest_SSEROUND),
-                 /* 20 */ ALWAYSDEFD(guest_CMSTART),
-                 /* 21 */ ALWAYSDEFD(guest_CMLEN),
-                 /* 22 */ ALWAYSDEFD(guest_SC_CLASS),
-                 /* 23 */ ALWAYSDEFD(guest_IP_AT_SYSCALL)
+                 /*  2 */ ALWAYSDEFD(guest_IFLAG),
+                 /*  3 */ ALWAYSDEFD(guest_DFLAG),
+                 /*  4 */ ALWAYSDEFD(guest_IDFLAG),
+                 /*  5 */ ALWAYSDEFD(guest_ACFLAG),
+                 /*  6 */ ALWAYSDEFD(guest_EIP),
+                 /*  7 */ ALWAYSDEFD(guest_FTOP),
+                 /*  8 */ ALWAYSDEFD(guest_FPTAG),
+                 /*  9 */ ALWAYSDEFD(guest_FPROUND),
+                 /* 10 */ ALWAYSDEFD(guest_FC3210),
+                 /* 11 */ ALWAYSDEFD(guest_CS),
+                 /* 12 */ ALWAYSDEFD(guest_DS),
+                 /* 13 */ ALWAYSDEFD(guest_ES),
+                 /* 14 */ ALWAYSDEFD(guest_FS),
+                 /* 15 */ ALWAYSDEFD(guest_GS),
+                 /* 16 */ ALWAYSDEFD(guest_SS),
+                 /* 17 */ ALWAYSDEFD(guest_LDT),
+                 /* 18 */ ALWAYSDEFD(guest_GDT),
+                 /* 19 */ ALWAYSDEFD(guest_EMNOTE),
+                 /* 20 */ ALWAYSDEFD(guest_SSEROUND),
+                 /* 21 */ ALWAYSDEFD(guest_CMSTART),
+                 /* 22 */ ALWAYSDEFD(guest_CMLEN),
+                 /* 23 */ ALWAYSDEFD(guest_SC_CLASS),
+                 /* 24 */ ALWAYSDEFD(guest_IP_AT_SYSCALL)
                }
         };
 
diff --git a/priv/guest_x86_toIR.c b/priv/guest_x86_toIR.c
index 56640ba..786a212 100644
--- a/priv/guest_x86_toIR.c
+++ b/priv/guest_x86_toIR.c
@@ -256,6 +256,7 @@ static IRSB* irsb;
 
 #define OFFB_FPREGS    offsetof(VexGuestX86State,guest_FPREG[0])
 #define OFFB_FPTAGS    offsetof(VexGuestX86State,guest_FPTAG[0])
+#define OFFB_IFLAG     offsetof(VexGuestX86State,guest_IFLAG)
 #define OFFB_DFLAG     offsetof(VexGuestX86State,guest_DFLAG)
 #define OFFB_IDFLAG    offsetof(VexGuestX86State,guest_IDFLAG)
 #define OFFB_ACFLAG    offsetof(VexGuestX86State,guest_ACFLAG)
@@ -7716,6 +7717,18 @@ void set_EFLAGS_from_value ( IRTemp t1,
       elimination of previous stores to this field work better. */
    stmt( IRStmt_Put( OFFB_CC_NDEP, mkU32(0) ));
 
+   /* Set the Interrupt flag (IF) */
+   stmt( IRStmt_Put(
+	       OFFB_IFLAG,
+	       IRExpr_ITE( 
+		   unop(Iop_32to1,
+		       binop(Iop_And32,
+			   binop(Iop_Shr32, mkexpr(t1), mkU8(9)), 
+			   mkU32(1))),
+		   mkU32(1),
+		   mkU32(0)))
+       );
+
    /* Also need to set the D flag, which is held in bit 10 of t1.
       If zero, put 1 in OFFB_DFLAG, else -1 in OFFB_DFLAG. */
    stmt( IRStmt_Put( 
@@ -14153,6 +14166,16 @@ DisResult disInstr_X86_WRK (
                               mkU32(1<<18)))
             );
 
+      /* And patch in the Interrupt flag (IF). */
+      t6 = newTemp(Ity_I32);
+      assign( t6, binop(Iop_Or32,
+                        mkexpr(t5),
+                        binop(Iop_And32,
+                              binop(Iop_Shl32, IRExpr_Get(OFFB_IFLAG,Ity_I32), 
+                                               mkU8(9)),
+                              mkU32(1<<9)))
+            );
+
       /* if sz==2, the stored value needs to be narrowed. */
       if (sz == 2)
         storeLE( mkexpr(t1), unop(Iop_32to16,mkexpr(t6)) );
@@ -14248,9 +14271,11 @@ DisResult disInstr_X86_WRK (
       break;
    /* Some basic kernel instructions, treat like NOPs */
    case 0xFA: /* CLI */
+      stmt( IRStmt_Put( OFFB_IFLAG, mkU32(0)) );
       DIP("cli\n");
       break;
    case 0xFB: /* STI */
+      stmt( IRStmt_Put( OFFB_IFLAG, mkU32(1)) );
       DIP("sti\n");
       break;
 
diff --git a/pub/libvex_guest_x86.h b/pub/libvex_guest_x86.h
index 5c77569..4b3cc8d 100644
--- a/pub/libvex_guest_x86.h
+++ b/pub/libvex_guest_x86.h
@@ -158,26 +158,28 @@ typedef
       UInt  guest_CC_DEP1;
       UInt  guest_CC_DEP2;
       UInt  guest_CC_NDEP;     /* 52 */
+      /* Bit 9 (IF) of eflags stored here, as either 0 or 1. */
+      UInt  guest_IFLAG;	/* 56 */
       /* The D flag is stored here, encoded as either -1 or +1 */
-      UInt  guest_DFLAG;       /* 56 */
+      UInt  guest_DFLAG;       /* 60 */
       /* Bit 21 (ID) of eflags stored here, as either 0 or 1. */
-      UInt  guest_IDFLAG;      /* 60 */
+      UInt  guest_IDFLAG;      /* 64 */
       /* Bit 18 (AC) of eflags stored here, as either 0 or 1. */
-      UInt  guest_ACFLAG;      /* 64 */
+      UInt  guest_ACFLAG;      /* 68 */
 
       /* EIP */
-      UInt  guest_EIP;         /* 68 */
+      UInt  guest_EIP;         /* 72 */
 
       /* FPU */
-      ULong guest_FPREG[8];    /* 72 */
-      UChar guest_FPTAG[8];   /* 136 */
-      UInt  guest_FPROUND;    /* 144 */
-      UInt  guest_FC3210;     /* 148 */
-      UInt  guest_FTOP;       /* 152 */
+      ULong guest_FPREG[8];    /* 76 */
+      UChar guest_FPTAG[8];   /* 142 */
+      UInt  guest_FPROUND;    /* 150 */
+      UInt  guest_FC3210;     /* 154 */
+      UInt  guest_FTOP;       /* 156 */
 
       /* SSE */
-      UInt  guest_SSEROUND;   /* 156 */
-      U128  guest_XMM0;       /* 160 */
+      UInt  guest_SSEROUND;   /* 160 */
+      U128  guest_XMM0;       /* 164 */
       U128  guest_XMM1;
       U128  guest_XMM2;
       U128  guest_XMM3;
@@ -222,7 +224,7 @@ typedef
       UInt guest_IP_AT_SYSCALL;
 
       /* Padding to make it have an 16-aligned size */
-      UInt padding1;
+      //UInt padding1;
    }
    VexGuestX86State;
 
